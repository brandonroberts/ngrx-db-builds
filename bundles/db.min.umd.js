!function(global,factory){"object"==typeof exports&&"undefined"!=typeof module?factory(exports,require("rxjs"),require("rxjs/operators"),require("@angular/core")):"function"==typeof define&&define.amd?define(["exports","rxjs","rxjs/operators","@angular/core"],factory):factory((global.ngrx=global.ngrx||{},global.ngrx.db=global.ngrx.db||{}),global.rxjs,global.rxjs_operators,global.ng.core)}(this,function(exports,rxjs,rxjs_operators,_angular_core){"use strict";function getIDBFactory(){return"undefined"!=typeof window?window.indexedDB:self.indexedDB}var IDB_SUCCESS="success",IDB_COMPLETE="complete",IDB_ERROR="error",IDB_UPGRADE_NEEDED="upgradeneeded",IDB_TXN_READ="readonly",IDB_TXN_READWRITE="readwrite",DB_INSERT="DB_INSERT",DatabaseBackend=new _angular_core.InjectionToken("IndexedDBBackend"),IDB_SCHEMA=new _angular_core.InjectionToken("IDB_SCHEMA"),Database=function(){function Database(idbBackend,schema){this.changes=new rxjs.Subject,this._schema=schema,this._idb=idbBackend}return Database.prototype._mapRecord=function(objectSchema){return function(dbResponseRec){return objectSchema.primaryKey||(dbResponseRec.record.$key=dbResponseRec.$key),dbResponseRec.record}},Database.prototype._upgradeDB=function(observer,db){for(var storeName in this._schema.stores)db.objectStoreNames.contains(storeName)&&db.deleteObjectStore(storeName),this._createObjectStore(db,storeName,this._schema.stores[storeName]);observer.next(db),observer.complete()},Database.prototype._createObjectStore=function(db,key,schema){db.createObjectStore(key,{autoIncrement:!0,keyPath:schema.primaryKey})},Database.prototype.open=function(dbName,version){var _this=this;void 0===version&&(version=1);var idb=this._idb;return rxjs.Observable.create(function(observer){var openReq=idb.open(dbName,_this._schema.version),onSuccess=function(event){observer.next(event.target.result),observer.complete()},onError=function(err){console.log(err),observer.error(err)},onUpgradeNeeded=function(event){_this._upgradeDB(observer,event.target.result)};return openReq.addEventListener(IDB_SUCCESS,onSuccess),openReq.addEventListener(IDB_ERROR,onError),openReq.addEventListener(IDB_UPGRADE_NEEDED,onUpgradeNeeded),function(){openReq.removeEventListener(IDB_SUCCESS,onSuccess),openReq.removeEventListener(IDB_ERROR,onError),openReq.removeEventListener(IDB_UPGRADE_NEEDED,onUpgradeNeeded)}})},Database.prototype.deleteDatabase=function(dbName){var _this=this;return new rxjs.Observable(function(deletionObserver){var deleteRequest=_this._idb.deleteDatabase(dbName),onSuccess=function(){deletionObserver.next(null),deletionObserver.complete()},onError=function(err){return deletionObserver.error(err)};return deleteRequest.addEventListener(IDB_SUCCESS,onSuccess),deleteRequest.addEventListener(IDB_ERROR,onError),function(){deleteRequest.removeEventListener(IDB_SUCCESS,onSuccess),deleteRequest.removeEventListener(IDB_ERROR,onError)}})},Database.prototype.insert=function(storeName,records,notify){var _this=this;void 0===notify&&(notify=!0);var write$=this.executeWrite(storeName,"put",records);return write$.pipe(rxjs_operators.tap(function(payload){return notify?_this.changes.next({type:DB_INSERT,payload:payload}):{}}))},Database.prototype.get=function(storeName,key){var _this=this,open$=this.open(this._schema.name);return open$.pipe(rxjs_operators.mergeMap(function(db){return new rxjs.Observable(function(txnObserver){var recordSchema=_this._schema.stores[storeName],txn=(_this._mapRecord(recordSchema),db.transaction([storeName],IDB_TXN_READ)),objectStore=txn.objectStore(storeName),getRequest=objectStore.get(key),onTxnError=function(err){return txnObserver.error(err)},onTxnComplete=function(){return txnObserver.complete()},onRecordFound=function(){return txnObserver.next(getRequest.result)};return txn.addEventListener(IDB_COMPLETE,onTxnComplete),txn.addEventListener(IDB_ERROR,onTxnError),getRequest.addEventListener(IDB_SUCCESS,onRecordFound),getRequest.addEventListener(IDB_ERROR,onTxnError),function(){getRequest.removeEventListener(IDB_SUCCESS,onRecordFound),getRequest.removeEventListener(IDB_ERROR,onTxnError),txn.removeEventListener(IDB_COMPLETE,onTxnComplete),txn.removeEventListener(IDB_ERROR,onTxnError)}})}))},Database.prototype.query=function(storeName,predicate){var open$=this.open(this._schema.name);return open$.pipe(rxjs_operators.mergeMap(function(db){return new rxjs.Observable(function(txnObserver){var txn=db.transaction([storeName],IDB_TXN_READ),objectStore=txn.objectStore(storeName),getRequest=objectStore.openCursor(),onTxnError=function(err){return txnObserver.error(err)},onRecordFound=function(ev){var cursor=ev.target.result;if(cursor){if(predicate){var match=predicate(cursor.value);match&&txnObserver.next(cursor.value)}else txnObserver.next(cursor.value);cursor.continue()}else txnObserver.complete()};return txn.addEventListener(IDB_ERROR,onTxnError),getRequest.addEventListener(IDB_SUCCESS,onRecordFound),getRequest.addEventListener(IDB_ERROR,onTxnError),function(){getRequest.removeEventListener(IDB_SUCCESS,onRecordFound),getRequest.removeEventListener(IDB_ERROR,onTxnError),txn.removeEventListener(IDB_ERROR,onTxnError)}})}))},Database.prototype.executeWrite=function(storeName,actionType,records){var _this=this,open$=(this.changes,this.open(this._schema.name));return open$.pipe(rxjs_operators.mergeMap(function(db){return new rxjs.Observable(function(txnObserver){var recordSchema=_this._schema.stores[storeName],mapper=_this._mapRecord(recordSchema),txn=db.transaction([storeName],IDB_TXN_READWRITE),objectStore=txn.objectStore(storeName),onTxnError=function(err){return txnObserver.error(err)},onTxnComplete=function(){return txnObserver.complete()};txn.addEventListener(IDB_COMPLETE,onTxnComplete),txn.addEventListener(IDB_ERROR,onTxnError);var makeRequest=function(record){return new rxjs.Observable(function(reqObserver){var req;if(recordSchema.primaryKey)req=objectStore[actionType](record);else{var $key=record.$key,$record=Object.assign({},record);delete $record.key,req=objectStore[actionType]($record,$key)}req.addEventListener(IDB_SUCCESS,function(){var $key=req.result;reqObserver.next(mapper({$key:$key,record:record}))}),req.addEventListener(IDB_ERROR,function(err){reqObserver.error(err)})})},requestSubscriber=rxjs.from(records).pipe(rxjs_operators.mergeMap(makeRequest)).subscribe(txnObserver);return function(){requestSubscriber.unsubscribe(),txn.removeEventListener(IDB_COMPLETE,onTxnComplete),txn.removeEventListener(IDB_ERROR,onTxnError)}})}))},Database.prototype.compare=function(a,b){return this._idb.cmp(a,b)},Database.decorators=[{type:_angular_core.Injectable}],Database.ctorParameters=function(){return[{type:void 0,decorators:[{type:_angular_core.Inject,args:[DatabaseBackend]}]},{type:void 0,decorators:[{type:_angular_core.Inject,args:[IDB_SCHEMA]}]}]},Database}(),DBModule=function(){function DBModule(){}return DBModule.provideDB=function(schema){return{ngModule:DBModule,providers:[{provide:IDB_SCHEMA,useValue:schema}]}},DBModule.decorators=[{type:_angular_core.NgModule,args:[{providers:[Database,{provide:DatabaseBackend,useFactory:getIDBFactory}]}]}],DBModule.ctorParameters=function(){return[]},DBModule}();exports.DB_INSERT=DB_INSERT,exports.DatabaseBackend=DatabaseBackend,exports.IDB_SCHEMA=IDB_SCHEMA,exports.getIDBFactory=getIDBFactory,exports.Database=Database,exports.DBModule=DBModule,Object.defineProperty(exports,"__esModule",{value:!0})});