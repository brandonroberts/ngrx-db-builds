{"version":3,"file":"database.js","sourceRoot":"","sources":["../../src/database.ts"],"names":[],"mappings":"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","sourcesContent":["import { Observable, Observer, Subscriber, Subject, from, pipe } from 'rxjs';\nimport { mergeMap, tap } from 'rxjs/operators';\nimport {\n  InjectionToken,\n  Inject,\n  Injectable,\n  NgModule,\n  ModuleWithProviders,\n} from '@angular/core';\n\nconst IDB_SUCCESS = 'success';\nconst IDB_COMPLETE = 'complete';\nconst IDB_ERROR = 'error';\nconst IDB_UPGRADE_NEEDED = 'upgradeneeded';\n\nconst IDB_TXN_READ = 'readonly';\nconst IDB_TXN_READWRITE = 'readwrite';\n\nexport const DB_INSERT = 'DB_INSERT';\n\nexport const DatabaseBackend = new InjectionToken('IndexedDBBackend');\nexport const IDB_SCHEMA = new InjectionToken('IDB_SCHEMA');\n\nexport interface DBUpgradeHandler {\n  (db: IDBDatabase): void;\n}\n\nexport interface DBStore {\n  primaryKey?: string;\n  autoIncrement?: boolean;\n}\n\nexport interface DBSchema {\n  version: number;\n  name: string;\n  stores: { [storename: string]: DBStore };\n}\n\nexport function getIDBFactory(): IDBFactory {\n  return typeof window !== 'undefined' ? window.indexedDB : self.indexedDB;\n}\n\n@Injectable()\nexport class Database {\n  public changes: Subject<any> = new Subject();\n\n  private _idb: IDBFactory;\n  private _schema: DBSchema;\n\n  constructor(\n    @Inject(DatabaseBackend) idbBackend: any,\n    @Inject(IDB_SCHEMA) schema: any,\n  ) {\n    this._schema = schema;\n    this._idb = idbBackend;\n  }\n\n  private _mapRecord(objectSchema: DBStore) {\n    return (dbResponseRec: any) => {\n      if (!objectSchema.primaryKey) {\n        dbResponseRec.record['$key'] = dbResponseRec['$key'];\n      }\n      return dbResponseRec.record;\n    };\n  }\n\n  private _upgradeDB(observer: Observer<IDBDatabase>, db: IDBDatabase) {\n    for (let storeName in this._schema.stores) {\n      if (db.objectStoreNames.contains(storeName)) {\n        db.deleteObjectStore(storeName);\n      }\n      this._createObjectStore(db, storeName, this._schema.stores[storeName]);\n    }\n    observer.next(db);\n    observer.complete();\n  }\n\n  private _createObjectStore(db: IDBDatabase, key: string, schema: DBStore) {\n    let objectStore = db.createObjectStore(key, {\n      autoIncrement: true,\n      keyPath: schema.primaryKey,\n    });\n  }\n\n  open(\n    dbName: string,\n    version: number = 1,\n    upgradeHandler?: DBUpgradeHandler,\n  ): Observable<IDBDatabase> {\n    const idb = this._idb;\n    return Observable.create((observer: Observer<any>) => {\n      const openReq = idb.open(dbName, this._schema.version);\n\n      const onSuccess = (event: any) => {\n        observer.next(event.target.result);\n        observer.complete();\n      };\n      const onError = (err: any) => {\n        console.log(err);\n        observer.error(err);\n      };\n\n      const onUpgradeNeeded = (event: any) => {\n        this._upgradeDB(observer, event.target.result);\n      };\n\n      openReq.addEventListener(IDB_SUCCESS, onSuccess);\n      openReq.addEventListener(IDB_ERROR, onError);\n      openReq.addEventListener(IDB_UPGRADE_NEEDED, onUpgradeNeeded);\n\n      return () => {\n        openReq.removeEventListener(IDB_SUCCESS, onSuccess);\n        openReq.removeEventListener(IDB_ERROR, onError);\n        openReq.removeEventListener(IDB_UPGRADE_NEEDED, onUpgradeNeeded);\n      };\n    });\n  }\n\n  deleteDatabase(dbName: string): Observable<any> {\n    return new Observable((deletionObserver: Observer<any>) => {\n      const deleteRequest = this._idb.deleteDatabase(dbName);\n\n      const onSuccess = (event: any) => {\n        deletionObserver.next(null);\n        deletionObserver.complete();\n      };\n\n      const onError = (err: any) => deletionObserver.error(err);\n\n      deleteRequest.addEventListener(IDB_SUCCESS, onSuccess);\n      deleteRequest.addEventListener(IDB_ERROR, onError);\n\n      return () => {\n        deleteRequest.removeEventListener(IDB_SUCCESS, onSuccess);\n        deleteRequest.removeEventListener(IDB_ERROR, onError);\n      };\n    });\n  }\n\n  insert(\n    storeName: string,\n    records: any[],\n    notify: boolean = true,\n  ): Observable<any> {\n    const write$ = this.executeWrite(storeName, 'put', records);\n\n    return write$.pipe(\n      tap(\n        (payload: any) =>\n          notify ? this.changes.next({ type: DB_INSERT, payload }) : {},\n      ),\n    );\n  }\n\n  get(storeName: string, key: any): Observable<any> {\n    const open$ = this.open(this._schema.name);\n\n    return open$.pipe(\n      mergeMap((db: IDBDatabase) => {\n        return new Observable((txnObserver: Observer<any>) => {\n          const recordSchema = this._schema.stores[storeName];\n          const mapper = this._mapRecord(recordSchema);\n          const txn = db.transaction([storeName], IDB_TXN_READ);\n          const objectStore = txn.objectStore(storeName);\n\n          const getRequest = objectStore.get(key);\n\n          const onTxnError = (err: any) => txnObserver.error(err);\n          const onTxnComplete = () => txnObserver.complete();\n          const onRecordFound = (ev: any) =>\n            txnObserver.next(getRequest.result);\n\n          txn.addEventListener(IDB_COMPLETE, onTxnComplete);\n          txn.addEventListener(IDB_ERROR, onTxnError);\n\n          getRequest.addEventListener(IDB_SUCCESS, onRecordFound);\n          getRequest.addEventListener(IDB_ERROR, onTxnError);\n\n          return () => {\n            getRequest.removeEventListener(IDB_SUCCESS, onRecordFound);\n            getRequest.removeEventListener(IDB_ERROR, onTxnError);\n            txn.removeEventListener(IDB_COMPLETE, onTxnComplete);\n            txn.removeEventListener(IDB_ERROR, onTxnError);\n          };\n        });\n      }),\n    );\n  }\n\n  query(storeName: string, predicate?: (rec: any) => boolean): Observable<any> {\n    const open$ = this.open(this._schema.name);\n\n    return open$.pipe(\n      mergeMap((db: IDBDatabase) => {\n        return new Observable((txnObserver: Observer<any>) => {\n          const txn = db.transaction([storeName], IDB_TXN_READ);\n          const objectStore = txn.objectStore(storeName);\n\n          const getRequest = objectStore.openCursor();\n\n          const onTxnError = (err: any) => txnObserver.error(err);\n          const onRecordFound = (ev: any) => {\n            let cursor = ev.target.result;\n            if (cursor) {\n              if (predicate) {\n                const match = predicate(cursor.value);\n                if (match) {\n                  txnObserver.next(cursor.value);\n                }\n              } else {\n                txnObserver.next(cursor.value);\n              }\n              cursor.continue();\n            } else {\n              txnObserver.complete();\n            }\n          };\n\n          txn.addEventListener(IDB_ERROR, onTxnError);\n\n          getRequest.addEventListener(IDB_SUCCESS, onRecordFound);\n          getRequest.addEventListener(IDB_ERROR, onTxnError);\n\n          return () => {\n            getRequest.removeEventListener(IDB_SUCCESS, onRecordFound);\n            getRequest.removeEventListener(IDB_ERROR, onTxnError);\n            txn.removeEventListener(IDB_ERROR, onTxnError);\n          };\n        });\n      }),\n    );\n  }\n\n  executeWrite(\n    storeName: string,\n    actionType: string,\n    records: any[],\n  ): Observable<any> {\n    const changes = this.changes;\n    const open$ = this.open(this._schema.name);\n\n    return open$.pipe(\n      mergeMap((db: IDBDatabase) => {\n        return new Observable((txnObserver: Observer<any>) => {\n          const recordSchema = this._schema.stores[storeName];\n          const mapper = this._mapRecord(recordSchema);\n          const txn = db.transaction([storeName], IDB_TXN_READWRITE);\n          const objectStore: any = txn.objectStore(storeName);\n\n          const onTxnError = (err: any) => txnObserver.error(err);\n          const onTxnComplete = () => txnObserver.complete();\n\n          txn.addEventListener(IDB_COMPLETE, onTxnComplete);\n          txn.addEventListener(IDB_ERROR, onTxnError);\n\n          const makeRequest = (record: any) => {\n            return new Observable((reqObserver: Observer<any>) => {\n              let req: any;\n              if (recordSchema.primaryKey) {\n                req = objectStore[actionType](record);\n              } else {\n                let $key = record['$key'];\n                let $record = (Object as any).assign({}, record);\n                delete $record.key;\n                req = objectStore[actionType]($record, $key);\n              }\n              req.addEventListener(IDB_SUCCESS, () => {\n                let $key = req.result;\n                reqObserver.next(mapper({ $key, record }));\n              });\n              req.addEventListener(IDB_ERROR, (err: any) => {\n                reqObserver.error(err);\n              });\n            });\n          };\n\n          let requestSubscriber = from(records)\n            .pipe(mergeMap(makeRequest))\n            .subscribe(txnObserver);\n\n          return () => {\n            requestSubscriber.unsubscribe();\n            txn.removeEventListener(IDB_COMPLETE, onTxnComplete);\n            txn.removeEventListener(IDB_ERROR, onTxnError);\n          };\n        });\n      }),\n    );\n  }\n\n  compare(a: any, b: any): number {\n    return this._idb.cmp(a, b);\n  }\n}\n\n@NgModule({\n  providers: [\n    Database,\n    { provide: DatabaseBackend, useFactory: getIDBFactory },\n  ],\n})\nexport class DBModule {\n  static provideDB(schema: DBSchema): ModuleWithProviders {\n    return {\n      ngModule: DBModule,\n      providers: [{ provide: IDB_SCHEMA, useValue: schema }],\n    };\n  }\n}\n"]}